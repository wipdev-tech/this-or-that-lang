// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: votes.sql

package database

import (
	"context"
	"database/sql"
)

const getAllVotes = `-- name: GetAllVotes :many
SELECT
    votes.lang1_id,
    languages1.name      AS lang1_Name,
    languages1.logo_slug AS lang1_slug,
    votes.lang2_id,
    languages2.name      AS lang2_Name,
    languages2.logo_slug AS lang2_slug,
    votes.choice
FROM votes
INNER JOIN languages languages1
ON languages1.id = votes.lang1_id
INNER JOIN languages languages2
ON languages2.id = votes.lang2_id
`

type GetAllVotesRow struct {
	Lang1ID   int64
	Lang1Name string
	Lang1Slug string
	Lang2ID   int64
	Lang2Name string
	Lang2Slug string
	Choice    sql.NullInt64
}

func (q *Queries) GetAllVotes(ctx context.Context) ([]GetAllVotesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllVotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVotesRow
	for rows.Next() {
		var i GetAllVotesRow
		if err := rows.Scan(
			&i.Lang1ID,
			&i.Lang1Name,
			&i.Lang1Slug,
			&i.Lang2ID,
			&i.Lang2Name,
			&i.Lang2Slug,
			&i.Choice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
